---
- name: Make sure that wireguard packages are installed
  become: yes
  package:
    name:
      - wireguard-tools
    state: present

- name: Ensure directory exists
  become: yes
  file:
    path: "{{ docker_dir }}/{{ container_name }}/config"
    state: directory
    mode: 0755
    owner: 1000
    group: 1000

- name: Run wiregen script
  ansible.builtin.script: "wiregen.py -u {{ surfshark_user }} -p {{ surfshark_pass }}"
  args:
    chdir: "{{ docker_dir }}/{{ container_name }}"
    creates: "{{ docker_dir }}/{{ container_name }}/Wireguard-Data/config"

- name: Change ownership
  become: yes
  file:
    path: "{{ docker_dir }}/{{ container_name }}/Wireguard-Data"
    mode: 0755
    owner: 1000
    group: 1000
    recurse: yes

- name: Copy correct config
  synchronize:
    src: "{{ docker_dir }}/{{ container_name }}/Wireguard-Data/config/{{ surfshark_location }}.conf"
    dest: "{{ docker_dir }}/{{ container_name }}/config/wg0.conf"
  delegate_to: "{{ inventory_hostname }}"

- name: Make sure the surfshark container is created and running
  docker_container:
    name: "{{ container_name }}"
    image: "lscr.io/linuxserver/wireguard"
    pull: yes
    networks:
      - name: my_macvlan
    privileged: yes
    sysctls:
      "net.ipv4.conf.all.src_valid_mark": "1"
    capabilities:
      - net_admin
      - sys_module
    state: 'started'
    env:
      "PUID": "{{ guid }}"
      "PGID": "{{ guid }}"
      "TZ": "{{ timezone }}"
      "ALLOWEDIPS": "0.0.0.0/0, {{ macvlan_network }}, {{ iot_network }}"
    restart_policy: unless-stopped
    labels: "{{
        {
         'priority': 'high'
        }
      }}"
    volumes:
      - "/docker/surfshark/Wireguard-Data/config:/config"
      - "/lib/modules:/lib/modules"
  register: result

- name: Update the DNS record to Cloudflare
  docker_container:
    name: "surfshark_update"
    image: "oznu/cloudflare-ddns:latest"
    detach: no
    cleanup: yes
    command: "ls"
    env:
      "PUID": "{{ guid }}"
      "PGID": "{{ guid }}"
      "TZ": "{{ timezone }}"
      "API_KEY": "{{ cloudflare_dns_token }}"
      "ZONE": "{{ domain }}"
      "PROXIED": "false"
      "SUBDOMAIN": "rem.{{ host_subdomain }}"
      "CUSTOM_LOOKUP_CMD": "echo '{{ result.container.NetworkSettings.Networks.my_macvlan.IPAddress }}'"