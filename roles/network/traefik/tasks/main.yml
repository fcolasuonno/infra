---
- name: Get infos on the containers
  docker_container_info:
    name: traefik
  register: traefik_docker_status

- name: Does container exist?
  set_fact:
    traefik_exists: yes
  when: traefik_docker_status.exists

- name: Is container running?
  set_fact:
    traefik_running: yes
  when: traefik_exists is defined and traefik_docker_status.container['State']['Running']

- name: Create an macvlan network
  docker_network:
    name: my_macvlan
    driver: macvlan
    driver_options:
      parent: '{{ swag_interface }}'
    ipam_config:
      - subnet: '{{ lan_network }}'
        gateway: '{{ lan_gateway }}'
        iprange: '{{ macvlan_network }}'

- name: restart Traefik
  docker_container:
    name: traefik
    state: started
    restart: yes
  when: traefik_exists is defined and traefik_running is defined

- name: Create Traefik Directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ traefik_data_directory }}"
    - "{{ traefik_data_directory }}/letsencrypt"

- name: Traefik Docker Container
  docker_container:
    name: traefik
    image: "{{ traefik_docker_image }}"
    pull: true
    command:
      - "--log.level={{ traefik_log_level }}"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.providersthrottleduration=2s"
      - "--entrypoints.web.address=:{{ traefik_port_http }}"
      - "--entrypoints.web-secure.address=:{{ traefik_port_https }}"
      - "--entrypoints.traefik.address=:{{ traefik_port_ui }}"
      - "--entrypoints.web-secure.http.tls.certresolver=letsencrypt"
      - "--entrypoints.web-secure.http.tls.domains[0].main={{ host_local }}"
      - "--entrypoints.web-secure.http.tls.domains[0].sans=*.{{ host_local }}"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider={{ traefik_dns_provider }}"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53"
      - "--certificatesresolvers.letsencrypt.acme.caserver={{ traefik_acme_server }}"
      - "--certificatesresolvers.letsencrypt.acme.email={{ email }}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    networks:
        - name: my_macvlan
          ipv4_address: '{{ macvlan_network | ansible.utils.nthhost(0) | ansible.utils.ipmath(-1) }}'
    volumes:
      - "{{ traefik_data_directory }}/letsencrypt:/letsencrypt:rw"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    env: "{{ traefik_environment_variables }}"
    restart_policy: unless-stopped
    memory: "{{ traefik_memory }}"
    labels:
      priority: "highest"
      traefik.enable: "true"
      traefik.http.routers.traefik.rule: "Host(`traefik.{{ host_local }}`)"
      traefik.http.routers.traefik.tls.certresolver: "letsencrypt"
      traefik.http.routers.traefik.tls.domains[0].main: "{{ host_local }}"
      traefik.http.routers.traefik.tls.domains[0].sans: "*.{{ host_local }}"
      traefik.http.services.traefik.loadbalancer.server.port: "{{ traefik_port_ui }}"
  register: result

- name: Update the Traefik DNS record to Cloudflare
  docker_container:
    name: "traefik_update"
    image: "oznu/cloudflare-ddns:latest"
    detach: no
    cleanup: yes
    command: "ls"
    env:
      "PUID": "{{ guid }}"
      "PGID": "{{ guid }}"
      "TZ": "{{ timezone }}"
      "API_KEY": "{{ cloudflare_dns_token }}"
      "ZONE": "{{ domain }}"
      "PROXIED": "false"
      "SUBDOMAIN": "{{ host_subdomain }}"
      "CUSTOM_LOOKUP_CMD": "echo '{{ result.container.NetworkSettings.Networks.my_macvlan.IPAddress }}'"

- name: Update the wildcard Traefik DNS record to Cloudflare
  docker_container:
    name: "traefik_update"
    image: "oznu/cloudflare-ddns:latest"
    detach: no
    cleanup: yes
    command: "ls"
    env:
      "PUID": "{{ guid }}"
      "PGID": "{{ guid }}"
      "TZ": "{{ timezone }}"
      "API_KEY": "{{ cloudflare_dns_token }}"
      "ZONE": "{{ domain }}"
      "PROXIED": "false"
      "SUBDOMAIN": "*.{{ host_subdomain }}"
      "CUSTOM_LOOKUP_CMD": "echo '{{ result.container.NetworkSettings.Networks.my_macvlan.IPAddress }}'"