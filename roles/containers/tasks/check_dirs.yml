---
- name: Create docker storage dir
  become: yes
  file:
    path: "{{ docker_storage }}"
    state: directory
    mode: u=rwx,g=x,o=
    owner: root
    group: root

- name: Handle persistent data
  become: no
  block:
  - name: Check if the persistent data folder exists on the remote machine
    stat:
      path: "{{ docker_dir }}"
    register: persistent_data

  - name: Check if the persistent data folder is empty
    become: yes
    shell: "ls */* -lA"
    args:
      chdir: "{{ docker_dir }}/"
    register: contents

  - name: Create the persistent data folder on the remote machine
    file:
      dest: "{{ docker_dir }}"
      state: directory
      owner: "{{ username }}"
      group: "users"
      mode: "ug=rwx,o=rx,g+s"
      recurse: yes
    when: not persistent_data.stat.exists

  - name: Ensure the "{{ docker_backup_dir }}" folder exists
    become: yes
    file:
      path: "{{ docker_backup_dir }}"
      state: directory
    when: contents["stdout_lines"] | length < 20 or not persistent_data.stat.exists

  - name: Restore the "{{ docker_backup_dir }}" folder from the MergerFS array
    synchronize:
      src: "{{ docker_backup_dir }}"
      dest: "{{ docker_dir }}/"
      delete: true
      recursive: yes
    delegate_to: "{{ inventory_hostname }}"
    when: contents["stdout_lines"] | length < 20 or not persistent_data.stat.exists

- name: Chmod the data folder
  become: yes
  file:
    dest: "{{ docker_dir }}"
    state: directory
    owner: "{{ username }}"
    mode: "0775"
    group: "users"
    recurse: yes
  when: contents["stdout_lines"] | length < 20 or not persistent_data.stat.exists

- name: configure crontab to remove unnused docker containers/images
  cron:
    user: "{{ username }}"
    name: "running docker system prune"
    minute: "0"
    hour: "4"
    weekday: "0"
    job: "docker system prune -af"
