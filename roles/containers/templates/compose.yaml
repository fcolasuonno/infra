networks:
  apps:
    driver: macvlan
    driver_opts:
      parent: "{{ macvlan_interface }}"
    ipam:
      config:
        - subnet: "{{ lan_network }}"
          gateway: "{{ lan_gateway }}"
          ip_range: "{{ macvlan_network }}"
          aux_addresses:
            host1: '{{ macvlan_shim_host }}'

services:
  watchtower:
    container_name: watchtower
    image: "containrrr/watchtower"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  nginxproxymanager:
    container_name: nginxproxymanager
    image: jc21/nginx-proxy-manager:latest
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(1) }}"
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    restart: always
    volumes:
      - "{{ docker_dir }}/nginxproxymanager/data:/data"
      - "{{ docker_dir }}/nginxproxymanager/letsencrypt:/etc/letsencrypt"

  heimdall:
    container_name: heimdall
    image: linuxserver/heimdall:latest
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(2) }}"
    restart: always
    volumes:
      - '{{ docker_dir }}/heimdall/config:/config'
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  portainer:
    container_name: portainer
    privileged: true
    image: portainer/portainer-ce:latest
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(3) }}"
    restart: always
    volumes:
      - '{{ docker_dir }}/portainer/config:/data'
      - '/var/run/docker.sock:/var/run/docker.sock'
    environment:
      - TZ={{ timezone }}

  cloudflared:
    container_name: cloudflared
    image: cloudflare/cloudflared:latest
    command: "tunnel run"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(4) }}"
    restart: always
    volumes:
      - '{{ docker_dir }}/cloudflared/config:/home/nonroot/.cloudflared/'
    environment:
      - TZ={{ timezone }}
      - TUNNEL_TOKEN={{ cloudflared_token }}

  cloudcmd:
    container_name: cloudcmd
    image: coderaiser/cloudcmd
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(5) }}"
    restart: always
    volumes:
      - '{{ docker_dir }}/cloudcmd/config:/config'
      - "/:/mnt/fs"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  mqtt:
    container_name: mqtt
    image: eclipse-mosquitto
    networks:
      apps:
        ipv4_address: "{{ macvlan_mqtt_host }}"
    restart: always
    volumes:
      - "{{ docker_dir }}/mqtt/config:/mosquitto/config"
      - "{{ docker_dir }}/mqtt/data:/mosquitto/data"
      - "{{ docker_dir }}/mqtt/log:/mosquitto/log"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: "koenkk/zigbee2mqtt"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(6) }}"
    privileged: true
    devices:
      - "/dev/serial/by-id/usb-ITead_Sonoff_Zigbee_3.0_USB_Dongle_Plus_dce56fd39c29ec11b9e16c7840c9ce8d-if00-port0:/dev/ttyACM0"
    volumes:
      - '/run/udev:/run/udev:ro'
      - '{{ docker_dir }}/zigbee2mqtt/config:/app/data'
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  valetudomapper:
    container_name: valetudomapper
    image: "rand256/valetudo-mapper:latest"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(7) }}"
    volumes:
      - '{{ docker_dir }}/valetudomapper/config/config.json:/app/config.json'
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  homeassistant:
    container_name: homeassistant
    image: "homeassistant/home-assistant:stable"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(8) }}"
    volumes:
      - '{{ docker_dir }}/homeassistant/config:/config'
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  jellyfin:
    container_name: jellyfin
    image: "ghcr.io/linuxserver/jellyfin:latest"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(9) }}"
    privileged: true
    devices:
      - "/dev/dri:/dev/dri"
    volumes:
      - "{{ docker_dir }}/jellyfin:/config"
      - "{{ mergerfs_root }}/Media/TV:/data/TV"
      - "{{ mergerfs_root_slow }}/Media/Transcodes:/config/data/transcodes"
      - "{{ mergerfs_root }}/Media/Metadata:/metadata"
      - "{{ mergerfs_root }}/Media/Cache:/data/Cache"
      - "{{ mergerfs_root }}/Media/Movies:/data/Movies"
      - "{{ mergerfs_root }}/Media/Movies_ITA:/data/Movies_ITA"
      - "{{ mergerfs_root }}/Media/Music:/data/Music"
      - "{{ mergerfs_root }}/Media/Audiobook:/data/Audiobook"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - DOCKER_MODS="linuxserver/mods:jellyfin-opencl-intel"
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  plex:
    container_name: plex
    image: "lscr.io/linuxserver/plex:latest"
    networks:
      apps:
        ipv4_address: "{{ macvlan_plex_host }}"
    privileged: true
    devices:
      - "/dev/dri:/dev/dri"
    volumes:
      - "{{ docker_dir }}/plex:/config"
      - "{{ mergerfs_root }}/Media/TV:/tv"
      - "{{ mergerfs_root }}/Media/Movies:/movies"
      - "{{ mergerfs_root }}/Media/Movies_ITA:/movies_ita"
      - "{{ mergerfs_root }}/Media/Music:/music"
    environment:
      - DOCKER_MODS="linuxserver/mods:jellyfin-opencl-intel"
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}
      - PLEX_CLAIM={{ plex_claim }}

  calibre-web:
    container_name: calibre-web
    image: "lscr.io/linuxserver/calibre-web:latest"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(10) }}"
    volumes:
      - '{{ docker_dir }}/calibre-web/config:/config'
      - "{{ mergerfs_root }}/Media/Books:/books"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  ubooquity:
    container_name: ubooquity
    image: "linuxserver/ubooquity:latest"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(11) }}"
    volumes:
      - '{{ docker_dir }}/ubooquity/config:/config'
      - '{{ docker_dir }}/ubooquity/files:/files'
      - "{{ mergerfs_root }}/Media/Comics:/comics"
      - "{{ mergerfs_root }}/Media/Books:/books"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  rdesktop:
    container_name: rdesktop
    image: "rdesktop"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(12) }}"
    privileged: true
    sysctls:
      "net.ipv4.conf.all.src_valid_mark": "1"
    cap_add:
      - net_admin
      - sys_module
    shm_size: "2GB"
    volumes:
      - "{{ docker_dir }}/rdesktop/config:/config"
      - "/lib/modules:/lib/modules"
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ mergerfs_root }}/Media:/media"
      - "{{ mergerfs_root }}/Downloads:/downloads"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}
      - ALLOWEDIPS=0.0.0.0/0, {{ macvlan_network }}, {{ iot_network }}
      - SURFSHARK_USER={{ surfshark_user }}
      - SURFSHARK_PASSWORD={{ surfshark_pass }}
      - SURFSHARK_LOCATION={{ surfshark_location }}