networks:
  apps:
    driver: macvlan
    driver_opts:
      parent: "{{ macvlan_interface }}"
    ipam:
      config:
        - subnet: "{{ lan_network }}"
          gateway: "{{ lan_gateway }}"
          ip_range: "{{ macvlan_network }}"
          aux_addresses:
            host1: '{{ macvlan_shim_host }}'

services:
  watchtower:
    restart: always
    container_name: watchtower
    image: "containrrr/watchtower"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  nginxproxymanager:
    restart: always
    container_name: nginxproxymanager
    image: jc21/nginx-proxy-manager:latest
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(1) }}"
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - "{{ docker_dir }}/nginxproxymanager/data:/data"
      - "{{ docker_dir }}/nginxproxymanager/letsencrypt:/etc/letsencrypt"

  plex:
    restart: always
    container_name: plex
    image: "lscr.io/linuxserver/plex:latest"
    networks:
      apps:
        ipv4_address: "{{ macvlan_plex_host }}"
    privileged: true
    devices:
      - "/dev/dri:/dev/dri"
    volumes:
      - "{{ docker_dir }}/plex:/config"
      - "{{ mergerfs_root }}/Media/TV:/tv"
      - "{{ mergerfs_root }}/Media/Movies:/movies"
      - "{{ mergerfs_root }}/Media/Movies_ITA:/movies_ita"
      - "{{ mergerfs_root }}/Media/Music:/music"
    environment:
      - DOCKER_MODS="linuxserver/mods:jellyfin-opencl-intel"
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}
      - PLEX_CLAIM={{ plex_claim }}
      - START_DOCKER=false
      - DRINODE=/dev/dri/renderD128

  mqtt:
    restart: always
    container_name: mqtt
    image: eclipse-mosquitto
    networks:
      apps:
        ipv4_address: "{{ macvlan_mqtt_host }}"
    volumes:
      - "{{ docker_dir }}/mqtt/config:/mosquitto/config"
      - "{{ docker_dir }}/mqtt/data:/mosquitto/data"
      - "{{ docker_dir }}/mqtt/log:/mosquitto/log"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  cloudflared:
    restart: always
    container_name: cloudflared
    image: cloudflare/cloudflared:latest
    command: "tunnel run"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(4) }}"
    volumes:
      - '{{ docker_dir }}/cloudflared/config:/home/nonroot/.cloudflared/'
    environment:
      - TZ={{ timezone }}
      - TUNNEL_TOKEN={{ cloudflared_token }}

  cloudcmd:
    restart: always
    container_name: cloudcmd
    image: coderaiser/cloudcmd
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(5) }}"
    volumes:
      - '{{ docker_dir }}/cloudcmd/config:/config'
      - "/:/mnt/fs"
    environment:
      - CLOUDCMD_ROOT=/mnt/fs
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  zigbee2mqtt:
    restart: always
    container_name: zigbee2mqtt
    image: "koenkk/zigbee2mqtt"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(6) }}"
    privileged: true
    devices:
      - "/dev/serial/by-id/usb-ITead_Sonoff_Zigbee_3.0_USB_Dongle_Plus_dce56fd39c29ec11b9e16c7840c9ce8d-if00-port0:/dev/ttyACM0"
    volumes:
      - '/run/udev:/run/udev:ro'
      - '{{ docker_dir }}/zigbee2mqtt/config:/app/data'
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}
      - START_DOCKER=false

  valetudomapper:
    restart: always
    container_name: valetudomapper
    image: "rand256/valetudo-mapper:latest"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(7) }}"
    volumes:
      - '{{ docker_dir }}/valetudomapper/config/config.json:/app/config.json'
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  homeassistant:
    restart: always
    container_name: homeassistant
    image: "homeassistant/home-assistant:stable"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(8) }}"
    volumes:
      - '{{ docker_dir }}/homeassistant/config:/config'
      - "{{ mergerfs_root }}/Media/HomeAssistant:/media"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  jellyfin:
    restart: always
    container_name: jellyfin
    image: "ghcr.io/linuxserver/jellyfin:latest"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(9) }}"
    privileged: true
    devices:
      - "/dev/dri:/dev/dri"
    volumes:
      - "{{ docker_dir }}/jellyfin:/config"
      - "{{ mergerfs_root }}/Media/TV:/data/TV"
      - "{{ mergerfs_root_slow }}/Media/Transcodes:/config/data/transcodes"
      - "{{ mergerfs_root }}/Media/Metadata:/metadata"
      - "{{ mergerfs_root }}/Media/Cache:/data/Cache"
      - "{{ mergerfs_root }}/Media/Movies:/data/Movies"
      - "{{ mergerfs_root }}/Media/Movies_ITA:/data/Movies_ITA"
      - "{{ mergerfs_root }}/Media/Music:/data/Music"
      - "{{ mergerfs_root }}/Media/Audiobook:/data/Audiobook"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - DOCKER_MODS="linuxserver/mods:jellyfin-opencl-intel"
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}
      - START_DOCKER=false
      - DRINODE=/dev/dri/renderD128

  calibre-web:
    restart: always
    container_name: calibre-web
    image: "lscr.io/linuxserver/calibre-web:latest"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(10) }}"
    volumes:
      - '{{ docker_dir }}/calibre-web/config:/config'
      - "{{ mergerfs_root }}/Media/Books:/books"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  ubooquity:
    restart: always
    container_name: ubooquity
    image: "linuxserver/ubooquity:latest"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(11) }}"
    volumes:
      - '{{ docker_dir }}/ubooquity/config:/config'
      - '{{ docker_dir }}/ubooquity/files:/files'
      - "{{ mergerfs_root }}/Media/Comics:/comics"
      - "{{ mergerfs_root }}/Media/Books:/books"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    restart: always
    cap_add:
      - NET_ADMIN
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(12) }}"
    ports:
      - 3000:3000
      - 3001:3001
    environment:
      - VPN_SERVICE_PROVIDER=surfshark
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY={{ surfshark_private_key }}
      - WIREGUARD_PUBLIC_KEY={{ surfshark_public_key }}
      - WIREGUARD_ADDRESSES={{ surfshark_address }}
      - SERVER_COUNTRIES={{ surfshark_countries }}

  rdesktop:
    image: "linuxserver/firefox:latest"
    container_name: rdesktop
    network_mode: "service:gluetun"
    devices:
      - "/dev/dri:/dev/dri"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}
      - START_DOCKER=false
      - DRINODE=/dev/dri/renderD128
    volumes:
      - '{{ docker_dir }}/rdesktop/config:/config'
      - "{{ docker_dir }}/rdesktop/custom-cont-init.d:/custom-cont-init.d:ro"
      - "{{ mergerfs_root }}/Media:/media"
      - "{{ mergerfs_root }}/Downloads:/downloads"
    shm_size: "1gb"
    restart: unless-stopped

  creativity:
    restart: always
    container_name: creativity
    image: "linuxserver/webtop:ubuntu-openbox"
    devices:
      - "/dev/dri:/dev/dri"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(13) }}"
    volumes:
      - "{{ docker_dir }}/creativity/config:/config"
      - "{{ docker_dir }}/creativity/custom-cont-init.d:/custom-cont-init.d:ro"
      - "{{ mergerfs_root }}/Downloads:/downloads"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}
      - SSL_CERT_FILE="/etc/ssl/certs/ca-certificates.crt"
      - DRINODE=/dev/dri/renderD128

  mqttx:
    restart: always
    container_name: mqttx
    image: "emqx/mqttx-web"
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(14) }}"
    environment:
      - TZ={{ timezone }}
      - PUID={{ guid }}
      - PGID={{ guid }}

  kopia:
    restart: always
    container_name: kopia
    image: kopia/kopia:latest
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(15) }}"
    entrypoint: [ "/bin/sh","-c" ]
    command:
      - |
        test ! -e /app/config/repository.config && \
          kopia repository connect from-config --token {{ kopia_token }} --override-hostname={{ host_local }} --enable-actions && \
          kopia snapshot create /app/backup/{{ host_local }}
        printf "#!/bin/sh\nset -e\ncurl -S -s -o /dev/null {{ kopia_healtcheck_url }}" > /app/post_snapshot.sh && \
          chmod +x /app/post_snapshot.sh && \
          kopia policy set /app/backup/{{ host_local }} --after-snapshot-root-action /app/post_snapshot.sh --snapshot-time 05:30 \
           --add-ignore data/plex --add-ignore data/jellyfin --add-ignore data/creativity --add-ignore .cache --add-ignore logs/
        kopia server start --insecure --refresh-interval=12h --address=http://kopia:51515 --without-password --enable-actions
    environment:
      - KOPIA_PASSWORD={{ kopia_password }}
      - TZ
    volumes:
      - "{{ docker_dir }}/kopia/config:/app/config"
      - "{{ docker_backup_dir }}:/app/backup/{{ host_local }}:ro"

  ring-mqtt:
    restart: always
    container_name: ring-mqtt
    image: tsightler/ring-mqtt
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(16) }}"
    volumes:
      - '{{ docker_dir }}/ringmqtt:/data'
    logging:
      options:
        max-size: 10m
        max-file: "3"

  homarr:
    restart: always
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(17) }}"
    volumes:
      - "{{ docker_dir }}/homarr/configs:/app/data/configs"
      - "{{ docker_dir }}/homarr/data:/data"
      - "{{ docker_dir }}/homarr/icons:/app/public/icons"
    environment:
      - TZ={{ timezone }}

  portainer:
    restart: always
    container_name: portainer
    privileged: true
    image: portainer/portainer-ce:latest
    networks:
      apps:
        ipv4_address: "{{ macvlan_network | ansible.utils.next_nth_usable(18) }}"
    volumes:
      - '{{ docker_dir }}/portainer/config:/data'
      - '/var/run/docker.sock:/var/run/docker.sock'
    environment:
      - TZ={{ timezone }}
      - START_DOCKER=false
