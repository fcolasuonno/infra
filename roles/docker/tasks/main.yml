---
- include_tasks: repo_arch.yml

- name: Include OS-specific variables
  include_vars: "{{ ansible_facts['distribution'] }}.yml"
- name: Install required system packages
  package:
    state: present
    name: "{{ docker_deps }}"

- name: Install Docker (Ubuntu)
  when: ansible_facts['distribution'] == 'Ubuntu'
  block:
  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: "deb [arch={{ repo_arch }}] https://download.docker.com/linux/{{ ansible_facts['distribution'] | lower }} {{ ansible_lsb['codename'] }} stable"
      state: present

- name: Install Docker (Raspbian)
  when: ansible_facts['distribution'] == 'Debian'
  block:
  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/raspbian/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: "deb [arch=arm64] https://download.docker.com/linux/raspbian bullseye stable"
      state: present

  - name: Switch to iptables-legacy
    alternatives:
      name: iptables
      path: /usr/sbin/iptables-legacy

  - name: Switch to ip6tables-legacy
    alternatives:
      name: ip6tables
      path: /usr/sbin/ip6tables-legacy

  - name: Switch to pip3
    alternatives:
      name: pip
      link: /usr/bin/pip
      path: /usr/bin/pip3

  - name: Switch to python3
    alternatives:
      name: python
      link: /usr/bin/python
      path: /usr/bin/python3

- name: Update apt and install docker-ce
  when: ansible_facts['os_family'] == 'Debian'
  apt:
    update_cache: yes
    name: "{{ docker_packages }}"
    state: present

- name: Ensure group docker exists
  group:
    name: docker
    state: present

- name: Add user "{{ username }}" to group docker
  user:
    name: '{{ username }}'
    groups:
      - docker
    append: yes

- name: Install Docker Module for Python
  pip:
    name: docker

- name: Create docker storage dir
  become: yes
  file:
    path: "{{ docker_storage }}"
    state: directory
    mode: u=rwx,g=x,o=
    owner: root
    group: root

- name: Change docker storage
  become: yes
  ansible.builtin.replace:
    path: /lib/systemd/system/docker.service
    regexp: '(.+)dockerd -H(.+)$'
    replace: '\1dockerd -g {{ docker_storage }} -H\2'

- name: Make sure Docker is running and enabled
  service:
    name: docker
    state: started
    enabled: yes

- name: Get a list of containers
  delegate_to: localhost
  become: no
  find:
    paths:
      - "roles/containers/media"
      - "roles/containers/homeautomation"
      - "roles/containers/services"
      - "roles/containers/system"
    file_type: directory
    recurse: no
  register: containers

- name: Stop and remove all the disabled containers
  become: no
  docker_container:
    name: "{{ item.path.split('/')[-1] }}"
    state: absent
  when: not lookup('vars', 'enable_' + item.path.split('/')[-1])
  loop: "{{ containers.files }}"

- name: Handle persistent data
  become: no
  when: "enable_nas_stuff | default(False)"
  block:
  - name: Check if the persistent data folder exists on the remote machine
    stat:
      path: "{{ docker_dir }}"
    register: persistent_data
    when: "enable_nas_stuff | default(False)"

  - name: Check if the persistent data folder is empty
    become: yes
    shell: "ls */* -lA"
    args:
      chdir: "{{ docker_dir }}/"
    register: contents
    when: "enable_nas_stuff | default(False)"

  - name: Create the persistent data folder on the remote machine
    file:
      dest: "{{ docker_dir }}"
      state: directory
      owner: "{{ username }}"
      group: "users"
      mode: "ug=rwx,o=rx,g+s"
      recurse: yes
    when: not persistent_data.stat.exists

  - name: Ensure the "{{ docker_backup_dir }}" folder exists
    become: yes
    file:
      path: "{{ docker_backup_dir }}"
      state: directory
    when: contents["stdout_lines"] | length < 20 or not persistent_data.stat.exists

  - name: Restore the "{{ docker_backup_dir }}" folder from the MergerFS array
    synchronize:
      src: "{{ docker_backup_dir }}"
      dest: "{{ docker_dir }}/"
      delete: true
      recursive: yes
    delegate_to: "{{ inventory_hostname }}"
    when: contents["stdout_lines"] | length < 20 or not persistent_data.stat.exists

- name: Chmod the data folder
  become: yes
  file:
    dest: "{{ docker_dir }}"
    state: directory
    owner: "{{ username }}"
    mode: "0775"
    group: "users"
    recurse: yes
  when: contents["stdout_lines"] | length < 20 or not persistent_data.stat.exists
