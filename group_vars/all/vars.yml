#
# Do not edit this file directly
# Instead, add your customizations to group_vars/your-inventory-name/vars.yml
# For secret variables, use group_vars/your-inventory-name/vault.yml
#

#
# Networks
#
lan_network: 'x.x.x.0/24'
lan_gateway: "{{ lan_network | ansible.utils.nthhost(GATEWAY_IP_LAST) }}" # GATEWAY_IP_LAST = 1
lan_host: "{{ lan_network | ansible.utils.ipaddr(HOST_IP) }}"
vpn_network: '10.x.x.0/24'
macvlan_interface: eth0 # main eth interface
macvlan_network: 'x.x.x.192/27'
macvlan_shim_host: "{{ macvlan_network | ansible.utils.nthhost(0) }}"
macvlan_traefik_host: "{{ macvlan_network | ansible.utils.nthhost(0) | ansible.utils.ipmath(-1) }}"
macvlan_plex_host: "{{ macvlan_network | ansible.utils.nthhost(0) | ansible.utils.ipmath(-2) }}"
macvlan_mqtt_host: "{{ macvlan_network | ansible.utils.nthhost(0) | ansible.utils.ipmath(-3) }}"
dns_nameservers: [ '1.1.1.1', '1.0.0.1' ]

netplan_dispatch: "#! /bin/bash\nip link add vlan_shim link {{ macvlan_interface }} type macvlan mode bridge"

netplan_config:
  network:
    version: 2
    ethernets:
      eno1:
        addresses:
          - "{{ lan_host }}"
        nameservers:
          search: ["{{ host_local }}"]
          addresses: "{{ dns_nameservers }}"
        routes:
          - to: default
            via: "{{ lan_gateway }}"
      vlan_shim:
        addresses:
          - "{{ macvlan_shim_host | ansible.utils.ipsubnet }}"
        routes:
          - to: "{{ macvlan_network }}"
            via: "{{ lan_host }}"
            metric: 100
          - to: "{{ macvlan_traefik_host | ansible.utils.ipsubnet }}"
            via: "{{ lan_host }}"
            metric: 100

domain: "example.com" #registered zone in cloudflare
host_local: "SOMETHING.{{ domain }}"  #registered in cloudflare too

dmz_network: "{{ '.'.join(lan_gateway.split('.')[0:2]) }}.44.0/24"
dmz_gateway: "{{ '.'.join(dmz_network.split('.')[0:3]) }}.1"

iot_network: "{{ '.'.join(lan_gateway.split('.')[0:2]) }}.32.0/24"
iot_gateway: "{{ '.'.join(iot_network.split('.')[0:3]) }}.1"
iot_base: "{{ '.'.join(iot_network.split('.')[0:3]) }}"
iot_interface: eth 2

#
# Misc
#
hostname: '{{ inventory_hostname }}'

timezone: Europe/London

ntp_timezone: '{{ timezone }}'

locale: en_GB.UTF-8

keyboard_layout: gb

username: USERNAME

guid: '1000'

shell: /bin/bash

docker_home: SOMEWHERE_IN_THE_DISKS_BUT_NOT_IN_MERGERFS_DIR

docker_storage: "{{ docker_home}}/storage"

docker_dir: "{{ docker_home}}/data"

docker_install_compose_plugin: true

docker_daemon_options:
  data-root: "{{ docker_storage }}"

docker_compose_dir: "{{ docker_home}}/compose"

docker_backup_dir: "{{ mergerfs_root_slow }}/docker_backup"

spindown_time: 600 # in seconds

#
# Packages
#
extra_packages:
  - iperf3
    - speedtest-cli
    - htop
    - stow
    - git
    - mosh
    - rsync
    - lm-sensors
    - iotop
    - ncdu

#
# Apt mirrors
#
version: jammy

apt_mirror: http://mirrors.ukfast.co.uk/sites/archive.ubuntu.com/

#
# Email credentials (for SMART and Snapraid error reporting)
#

email: EMAIL_FROM_SENDINBLUE

email_login: '{{ email }}'

email_smtp_host: SENDINBLUE_HOST

email_smtp_port: 587

email_smtp_port_startls: 587

# MSMTP
msmtp_accounts:
    - account: mailbox
      host: '{{ email_smtp_host }}'
      port: '{{ email_smtp_port_startls }}'
      auth: 'on'
      from: '{{ email }}'
      user: '{{ email_login }}'
      password: '{{ email_password }}'

msmtp_default_account: 'mailbox'

msmtp_alias_default: '{{ email }}'

#
# SSH (geerlingguy.security)
#
security_ssh_port: SOME_RANDOM_PORT # SOME_RANDOM_PORT=99

ssh_public_key: 'ssh-rsa VERY_LONG_KEY_BASE64= USER@HOST' # from ~/.ssh/id*.pub

security_sudoers_passwordless: ['{{ username }}']

security_autoupdate_reboot: false

security_autoupdate_mail_to: '{{ email }}'

security_autoupdate_reboot_time: '23:00'

security_autoupdate_mail_on_error: false

# VPN

surfshark_user: some@email.com

surfshark_location: SOMEWHERE

#
# Samba
#
samba_server_string: '{{ hostname }}'

samba_users:
    - name: '{{ username }}'
      password: '{{ password }}'
    - name: '{{ additional_users[0].name }}'
      password: '{{ samba_guest_password }}'

samba_global_include: global-include.conf

samba_apple_extensions: no

samba_mitigate_cve_2017_7494: false

samba_server_max_protocol: 'SMB3'

samba_server_min_protocol: 'SMB3'

additional_users:
  - name: guest
    groups:

samba_map_to_guest: 'bad user'

samba_guest_account: '{{ additional_users[0].name }}'

samba_shares:
    - name: Trash
      guest_ok: 'no'
      public: 'no'
      read_only: 'no'
      writable: 'yes'
      owner: '{{ username }}'
      browseable: 'yes'
      path: '{{ mergerfs_root }}'
      valid_users: '{{ username }}, {{ additional_users[0].name }}'
      write_list: '{{ username }}, {{ additional_users[0].name }}'

    - name: Downloads
      guest_ok: 'no'
      public: 'no'
      read_only: 'no'
      writable: 'yes'
      browseable: 'yes'
      owner: '{{ username }}'
      path: '{{ mergerfs_root }}/Downloads'
      valid_users: '{{ username }}, {{ additional_users[0].name }}'
      write_list: '{{ username }}, {{ additional_users[0].name }}'

    - name: Media
      guest_ok: 'no'
      public: 'no'
      read_only: 'no'
      writable: 'yes'
      browseable: 'yes'
      owner: '{{ username }}'
      path: '{{ mergerfs_root }}/Media'
      valid_users: '{{ username }}, {{ additional_users[0].name }}'
      write_list: '{{ username }}, {{ additional_users[0].name }}'

    - name: MediaRO
      guest_ok: 'yes'
      public: 'yes'
      read_only: 'yes'
      writable: 'no'
      browseable: 'yes'
      owner: '{{ username }}'
      path: '{{ mergerfs_root }}/Media'

#
# Snapraid and MergerFS
#
mergerfs_root: /mnt/storage

mergerfs_root_slow: "{{ mergerfs_root }}_slow"

cache_root: /mnt/storage_cache

disks:
  - { path: /mnt/data1, src: /dev/disk/by-label/Data1, content: true }
  - { path: /mnt/data2, src: /dev/disk/by-label/Data2, content: true }

cache_disks:
  - { path: /mnt/cache1, src: /dev/disk/by-label/Cache1, content: true }

parity_disks:
  - { path: /mnt/parity1, src: /dev/disk/by-label/Parity1, content: true }

snapraid_data_disks: '{{ disks }}'

snapraid_parity_disks: '{{ parity_disks }}'

snapraid_bin_path: /usr/bin/snapraid

snapraid_runner_email_pass: '{{ email_password }}'

snapraid_runner_email_address: '{{ email }}'

snapraid_runner_email_address_from: '{{ snapraid_runner_email_address }}'

snapraid_runner_email_address_to: '{{ snapraid_runner_email_address }}'

snapraid_runner_smtp_host: '{{ email_smtp_host }}'

snapraid_runner_smtp_port: '{{ email_smtp_port }}'

snapraid_runner_command: 'python3 {{ snapraid_runner_bin }} -c {{ snapraid_runner_conf }}'

# Stop all the docker containers, backup the {{ docker_dir }} to the MergerFS pool, execute the snapraid runner and start the containers back up
# Stopping the containers is necessary â€“ backing up the data folder with the containers running will result in corrputed database files and no files can be changed during the Snapraid sync
snapraid_runner_cron_jobs:
    - {
      job: 'docker stop $(docker ps -q); rsync -avz --delete --exclude cache {{ docker_dir }} {{ docker_backup_dir }}; docker start $(docker ps -a -q --filter "label=priority=highest"); sleep 50s; docker start $(docker ps -a -q --filter "label=priority=high"); sleep 50s; docker start $(docker ps -a -q); {{ snapraid_runner_command }} ',
      name: 'snapraid_runner',
      weekday: '0,2,4',
      hour: '1',
    }

snapraid_runner_delete_threshold: 999999

snapraid_runner_email_sendon: 'error,success'

snapraid_runner_use_ssl: false

snapraid_content_files:
    - /var/snapraid.content

snapraid_config_excludes:
  - '*.unrecoverable'
  - /lost+found/
  - '*.!sync'
  - /tmp/
  - '/Downloads/*'
  - '/docker/'
  - 'bus_*.0'
  - 'openbox.log'

#
# SMART error reporting
#
smartd_default_mail_recipients: ['{{ email }}']

poweroff: false

#SECRETS (NOT STORED HERE)
#password: USER_PASSWORD
#ansible_become_pass: PASSWORD_FOR_SUDO
#email_password: PASSWORD_FOR_SMTP
#samba_guest_password: PASSWORD_FOR_SMB_GUEST
#cloudflare_dns_token: TOKEN_TO_UPDATE_CLOUDFLARE
#plex_claim: PLEX_CLAIM
#surfshark_pass: SOME_PASSWORD
#mqtt_password: PASSWORD_FOR_MOSQUITTO
#cloudflared_token: cloudflared_tokem
